# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tfz0wO81QRx_xQ4X-GgwqI6e_OHehZAJ
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics.pairwise import cosine_similarity

data = pd.read_csv('dummy.csv')
data = data[['Nama', 'Jenis Kelamin', 'Umur', 'Hobi', 'Preferensi Perjalanan']]

data['Preferensi Perjalanan'] = data['Preferensi Perjalanan'].apply(lambda x: ''.join(x.split()).lower())
data['Jenis Kelamin'] = data['Jenis Kelamin'].apply(lambda x: x.lower())
data['Hobi'] = data['Hobi'].apply(lambda x: x.lower())
data.set_index('Nama', inplace=True)
data

data['bag_of_words'] = data['Jenis Kelamin'].astype(str) + ' ' + data['Umur'].astype(str) + ' ' + ' ' + data['Hobi'].astype(str) + ' ' + data['Preferensi Perjalanan'].astype(str)
data.drop(columns=['Jenis Kelamin', 'Umur', 'Hobi', 'Preferensi Perjalanan'], inplace=True)

from sklearn.feature_extraction.text import CountVectorizer
# Create count matrix for data
count = CountVectorizer()
count_matrix = count.fit_transform(data['bag_of_words'])

indices = pd.Series(data.index)
cosine_sim = cosine_similarity(count_matrix, count_matrix)

def recommendations(nama, cosine_sim=cosine_sim):
  recommended_people = []
  idx = indices[indices == nama].index[0]
  score_series = pd.Series(cosine_sim[idx]).sort_values(ascending=False)
  top_10_indexes = list(score_series.iloc[1:11].index)
  for i in top_10_indexes:
    recommended_people.append(list(data.index)[i])
  return recommended_people